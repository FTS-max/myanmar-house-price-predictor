// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  username String    @unique
  bio      String?
  password String
  posts    Post[]
  comments Comment[]
  Token    Token[]
  postlikes     PostLike[]
  commentlikes  CommentLike[]
  friends     Friend[]  @relation("UserFriends")
  friendUsers Friend[]  @relation("FriendUsers")
  followers     Follow[]      @relation("followers")
  following     Follow[]      @relation("following")
  created  DateTime  @default(now())
}

model Token {
  id        Int      @id @default(autoincrement())
  usertoken String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  created   DateTime @default(now())
}

model Post {
  id       Int       @id @default(autoincrement())
  content  String
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
  comments Comment[]
  postLikes PostLike[]
  created  DateTime  @default(now())
}

model PostLike {
  id        Int     @id @default(autoincrement())
  posts      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  created   DateTime  @default(now())
}

model Comment {
  id      Int      @id @default(autoincrement())
  content String
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  post    Post     @relation(fields: [postId], references: [id])
  postId  Int
  commentLikes CommentLike[]
  created DateTime @default(now())
}

model CommentLike {
  id           Int     @id @default(autoincrement())
  comments      Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId    Int
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  created      DateTime  @default(now())
}

model Follow{
  id            Int       @id   @default(autoincrement())
  follower      User      @relation("followers",fields: [followerId], references: [id], onDelete: Cascade)
  followerId    Int
  following     User      @relation("following",fields: [followingId], references: [id], onDelete: Cascade)
  followingId   Int
  created       DateTime  @default(now())
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  created   DateTime @default(now())
  friendRequestStatusId Int
  friendRequestStatus FriendRequestStatus @relation(fields: [friendRequestStatusId], references: [id])
  
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)
}

model FriendRequestStatus {
  id        Int     @id @default(autoincrement())
  status    String  @unique
  created   DateTime @default(now())
  
  friends   Friend[]
}
